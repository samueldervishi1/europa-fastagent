name: Auto Release

on:
  push:
    branches: [main]

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Install dependencies
        run: |
          uv sync
          pip install toml

      - name: Run checks
        run: |
          uv run ruff check src/ --select F,I,TCH
          echo "Code checks passed"

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get current version and check if changed
        id: version_check
        run: |
          CURRENT_VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          echo "Current version: $CURRENT_VERSION"
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Check if this version already has a tag
          if git rev-parse "v$CURRENT_VERSION" >/dev/null 2>&1; then
            echo "Tag v$CURRENT_VERSION already exists, skipping release"
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "New version detected: v$CURRENT_VERSION"
            echo "should_release=true" >> $GITHUB_OUTPUT
          fi

      - name: Generate Release Notes
        if: steps.version_check.outputs.should_release == 'true'
        id: generate_notes
        uses: actions/github-script@v7
        with:
          script: |
            const { data: commits } = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 10
            });

            let latestCommit = null;
            for (const commit of commits) {
              const firstLine = commit.commit.message.split('\n')[0].trim();
              if (!firstLine.toLowerCase().includes('bump version') &&
                  !firstLine.toLowerCase().includes('merge') &&
                  !firstLine.startsWith('Merge ')) {
                latestCommit = commit;
                break;
              }
            }

            let releaseNotes = '';

            if (latestCommit) {
              const firstLine = latestCommit.commit.message.split('\n')[0].trim();
              
              if (firstLine.match(/^feat(\([^)]*\))?:\s*/)) {
                const cleanMessage = firstLine.replace(/^feat(\([^)]*\))?:\s*/, '');
                releaseNotes = '### New Features\n- ' + cleanMessage + '\n\n';
              } else if (firstLine.match(/^fix(\([^)]*\))?:\s*/)) {
                const cleanMessage = firstLine.replace(/^fix(\([^)]*\))?:\s*/, '');
                releaseNotes = '### Bug Fixes\n- ' + cleanMessage + '\n\n';
              } else if (firstLine.match(/^chore(\([^)]*\))?:\s*/)) {
                const cleanMessage = firstLine.replace(/^chore(\([^)]*\))?:\s*/, '');
                releaseNotes = '### Improvements\n- ' + cleanMessage + '\n\n';
              } else if (firstLine.match(/^(docs?|style|refactor|perf|test)(\([^)]*\))?:\s*/)) {
                const cleanMessage = firstLine.replace(/^(docs?|style|refactor|perf|test)(\([^)]*\))?:\s*/, '');
                releaseNotes = '### Improvements\n- ' + cleanMessage + '\n\n';
              } else {
                const lowerMessage = firstLine.toLowerCase();
                if (lowerMessage.includes('feature') || lowerMessage.includes('new ') || 
                    (lowerMessage.startsWith('add ') && !lowerMessage.includes('fix'))) {
                  releaseNotes = '### New Features\n- ' + firstLine + '\n\n';
                } else if (lowerMessage.includes('fix') || lowerMessage.includes('bug') || 
                           lowerMessage.includes('error') || lowerMessage.includes('issue')) {
                  releaseNotes = '### Bug Fixes\n- ' + firstLine + '\n\n';
                } else {
                  releaseNotes = '### Updates\n- ' + firstLine + '\n\n';
                }
              }
            }

            if (!releaseNotes.trim()) {
              releaseNotes = '### Updates\n- Various improvements and updates\n\n';
            }

            console.log('Generated release notes:', releaseNotes);
            core.setOutput('release-notes', releaseNotes);

      - name: Build package
        if: steps.version_check.outputs.should_release == 'true'
        run: uv build

      - name: Create Release
        if: steps.version_check.outputs.should_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version_check.outputs.current_version }}
          name: "Genesys v${{ steps.version_check.outputs.current_version }}"
          body: |
            ## Genesys v${{ steps.version_check.outputs.current_version }}

            AI coordinator powered by Google Gemini with MCP integration.

            ### Installation

            **Ubuntu/Linux (Recommended):**
            ```bash
            bash -c "$(curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/install.sh)"
            ```

            **Manual Installation:**
            ```bash
            pip install https://github.com/${{ github.repository }}/releases/download/v${{ steps.version_check.outputs.current_version }}/genesys-${{ steps.version_check.outputs.current_version }}-py3-none-any.whl
            ```

            ### Quick Start

            1. **Configure API keys:**
               ```bash
               genesys setup keys
               ```

            2. **Start the AI coordinator:**
               ```bash
               genesys
               ```

            ### Required API Keys

            - **Google Gemini API Key** (required): Get from [Google AI Studio](https://aistudio.google.com/app/apikey)
            - **Tavily API Key** (optional, for web search): Get from [Tavily](https://tavily.com/)

            ${{ steps.generate_notes.outputs.release-notes }}

            ### Features

            - Interactive AI coordinator terminal
            - F1 data integration and live terminal  
            - Web search via Tavily MCP
            - Filesystem operations via MCP
            - Persistent memory across sessions
            - Terminal command execution

            ---

            ### Full Changelog
            **Full Changelog**: https://github.com/${{ github.repository }}/commits/v${{ steps.version_check.outputs.current_version }}

            *Enjoy the interactive terminal with F1 data and MCP integration!*
          draft: false
          prerelease: ${{ contains(steps.version_check.outputs.current_version, 'beta') }}
          files: |
            dist/genesys-${{ steps.version_check.outputs.current_version }}-py3-none-any.whl
            dist/genesys-${{ steps.version_check.outputs.current_version }}.tar.gz