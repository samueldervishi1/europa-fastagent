{"level":"INFO","timestamp":"2025-02-17T15:30:07.401223","namespace":"mcp_agent.context","message":"Configuring logger with level: debug"}
{"level":"INFO","timestamp":"2025-02-17T15:30:07.399892","namespace":"mcp_agent.context","message":"Configuring logger with level: debug"}
{"level":"INFO","timestamp":"2025-02-17T15:30:07.400755","namespace":"mcp_agent.mcp_basic_agent","message":"MCPAgent initialized","data":{"data":{"progress_action":"Running","target":"mcp_basic_agent","agent_name":"mcp_application_loop"}}}
{"level":"INFO","timestamp":"2025-02-17T15:30:07.401707","namespace":"mcp_agent.mcp.mcp_aggregator.finder","message":"Creating persistent connection to server: fetch","data":{"data":{"progress_action":"Starting","server_name":"fetch","agent_name":"finder"}}}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:07.402009","namespace":"mcp_agent.mcp.mcp_connection_manager","message":"fetch: Found server configuration=","data":{"data":{"name":null,"description":null,"transport":"stdio","command":"uvx","args":["mcp-server-fetch"],"read_timeout_seconds":null,"url":null,"auth":null,"roots":null,"env":null}}}
{"level":"INFO","timestamp":"2025-02-17T15:30:07.402192","namespace":"mcp_agent.mcp.mcp_connection_manager","message":"fetch: Up and running with a persistent connection!"}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:07.403407","namespace":"mcp_agent.mcp.stdio","message":"Started process 'uvx' with PID: 49391"}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:07.403759","namespace":"mcp_agent.mcp.mcp_agent_client_session","message":"send_request: request=","data":{"data":{"method":"initialize","params":{"meta":null,"protocolVersion":"2024-11-05","capabilities":{"experimental":null,"sampling":null,"roots":{"listChanged":true}},"clientInfo":{"name":"mcp","version":"0.1.0"}}}}}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:07.758153","namespace":"mcp_agent.mcp.mcp_agent_client_session","message":"send_request: response=","data":{"data":{"meta":null,"protocolVersion":"2024-11-05","capabilities":{"experimental":{},"logging":null,"prompts":{"listChanged":false},"resources":null,"tools":{"listChanged":"False"}},"serverInfo":{"name":"mcp-fetch","version":"1.2.1"}}}}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:07.758330","namespace":"mcp_agent.mcp.mcp_agent_client_session","message":"send_notification:","data":{"data":{"method":"notifications/initialized","params":null}}}
{"level":"INFO","timestamp":"2025-02-17T15:30:07.758908","namespace":"mcp_agent.mcp.mcp_aggregator.finder","message":"Creating persistent connection to server: filesystem","data":{"data":{"progress_action":"Starting","server_name":"filesystem","agent_name":"finder"}}}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:07.759090","namespace":"mcp_agent.mcp.mcp_connection_manager","message":"filesystem: Found server configuration=","data":{"data":{"name":null,"description":null,"transport":"stdio","command":"npx","args":["-y","@modelcontextprotocol/server-filesystem","."],"read_timeout_seconds":null,"url":null,"auth":null,"roots":null,"env":null}}}
{"level":"INFO","timestamp":"2025-02-17T15:30:07.759306","namespace":"mcp_agent.mcp.mcp_connection_manager","message":"filesystem: Up and running with a persistent connection!"}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:07.760285","namespace":"mcp_agent.mcp.stdio","message":"Started process 'npx' with PID: 49423"}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:07.760502","namespace":"mcp_agent.mcp.mcp_agent_client_session","message":"send_request: request=","data":{"data":{"method":"initialize","params":{"meta":null,"protocolVersion":"2024-11-05","capabilities":{"experimental":null,"sampling":null,"roots":{"listChanged":true}},"clientInfo":{"name":"mcp","version":"0.1.0"}}}}}
{"level":"INFO","timestamp":"2025-02-17T15:30:08.436008","namespace":"mcp_agent.mcp.stdio.mcpserver.stderr","message":"Secure MCP Filesystem Server running on stdio"}
{"level":"INFO","timestamp":"2025-02-17T15:30:08.436364","namespace":"mcp_agent.mcp.stdio.mcpserver.stderr","message":"Allowed directories: [ '/home/ssmith/source/mcp-agent/examples/mcp_basic_agent' ]"}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:08.439267","namespace":"mcp_agent.mcp.mcp_agent_client_session","message":"send_request: response=","data":{"data":{"meta":null,"protocolVersion":"2024-11-05","capabilities":{"experimental":null,"logging":null,"prompts":null,"resources":null,"tools":{"listChanged":null}},"serverInfo":{"name":"secure-filesystem-server","version":"0.2.0"}}}}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:08.439374","namespace":"mcp_agent.mcp.mcp_agent_client_session","message":"send_notification:","data":{"data":{"method":"notifications/initialized","params":null}}}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:08.440364","namespace":"mcp_agent.mcp.mcp_agent_client_session","message":"send_request: request=","data":{"data":{"method":"tools/list","params":null,"cursor":null}}}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:08.440552","namespace":"mcp_agent.mcp.mcp_agent_client_session","message":"send_request: request=","data":{"data":{"method":"tools/list","params":null,"cursor":null}}}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:08.443196","namespace":"mcp_agent.mcp.mcp_agent_client_session","message":"send_request: response=","data":{"data":{"meta":null,"nextCursor":null,"tools":[{"name":"read_file","description":"Read the complete contents of a file from the file system. Handles various text encodings and provides detailed error messages if the file cannot be read. Use this tool when you need to examine the contents of a single file. Only works within allowed directories.","inputSchema":{"type":"object","properties":{"path":{"type":"string"}},"required":["path"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"read_multiple_files","description":"Read the contents of multiple files simultaneously. This is more efficient than reading files one by one when you need to analyze or compare multiple files. Each file's content is returned with its path as a reference. Failed reads for individual files won't stop the entire operation. Only works within allowed directories.","inputSchema":{"type":"object","properties":{"paths":{"type":"array","items":{"type":"string"}}},"required":["paths"],"additionalProperties":"False","$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"write_file","description":"Create a new file or completely overwrite an existing file with new content. Use with caution as it will overwrite existing files without warning. Handles text content with proper encoding. Only works within allowed directories.","inputSchema":{"type":"object","properties":{"path":{"type":"string"},"content":{"type":"string"}},"required":["path","content"],"additionalProperties":"False","$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"edit_file","description":"Make line-based edits to a text file. Each edit replaces exact line sequences with new content. Returns a git-style diff showing the changes made. Only works within allowed directories.","inputSchema":{"type":"object","properties":{"path":{"type":"string"},"edits":{"type":"array","items":{"type":"object","properties":{"oldText":{"type":"string","description":"Text to search for - must match exactly"},"newText":{"type":"string","description":"Text to replace with"}},"required":["oldText","newText"],"additionalProperties":"False"}},"dryRun":{"type":"boolean","default":"False","description":"Preview changes using git-style diff format"}},"required":["path","edits"],"additionalProperties":"False","$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"create_directory","description":"Create a new directory or ensure a directory exists. Can create multiple nested directories in one operation. If the directory already exists, this operation will succeed silently. Perfect for setting up directory structures for projects or ensuring required paths exist. Only works within allowed directories.","inputSchema":{"type":"object","properties":{"path":{"type":"string"}},"required":["path"],"additionalProperties":"False","$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"list_directory","description":"Get a detailed listing of all files and directories in a specified path. Results clearly distinguish between files and directories with [FILE] and [DIR] prefixes. This tool is essential for understanding directory structure and finding specific files within a directory. Only works within allowed directories.","inputSchema":{"type":"object","properties":{"path":{"type":"string"}},"required":["path"],"additionalProperties":"False","$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"directory_tree","description":"Get a recursive tree view of files and directories as a JSON structure. Each entry includes 'name', 'type' (file/directory), and 'children' for directories. Files have no children array, while directories always have a children array (which may be empty). The output is formatted with 2-space indentation for readability. Only works within allowed directories.","inputSchema":{"type":"object","properties":{"path":{"type":"string"}},"required":["path"],"additionalProperties":"False","$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"move_file","description":"Move or rename files and directories. Can move files between directories and rename them in a single operation. If the destination exists, the operation will fail. Works across different directories and can be used for simple renaming within the same directory. Both source and destination must be within allowed directories.","inputSchema":{"type":"object","properties":{"source":{"type":"string"},"destination":{"type":"string"}},"required":["source","destination"],"additionalProperties":"False","$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"search_files","description":"Recursively search for files and directories matching a pattern. Searches through all subdirectories from the starting path. The search is case-insensitive and matches partial names. Returns full paths to all matching items. Great for finding files when you don't know their exact location. Only searches within allowed directories.","inputSchema":{"type":"object","properties":{"path":{"type":"string"},"pattern":{"type":"string"},"excludePatterns":{"type":"array","items":{"type":"string"},"default":[]}},"required":["path","pattern"],"additionalProperties":"False","$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"get_file_info","description":"Retrieve detailed metadata about a file or directory. Returns comprehensive information including size, creation time, last modified time, permissions, and type. This tool is perfect for understanding file characteristics without reading the actual content. Only works within allowed directories.","inputSchema":{"type":"object","properties":{"path":{"type":"string"}},"required":["path"],"additionalProperties":"False","$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"list_allowed_directories","description":"Returns the list of directories that this server is allowed to access. Use this to understand which directories are available before trying to access files.","inputSchema":{"type":"object","properties":{},"required":[]}}]}}}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:08.444384","namespace":"mcp_agent.mcp.mcp_agent_client_session","message":"send_request: response=","data":{"data":{"meta":null,"nextCursor":null,"tools":[{"name":"fetch","description":"Fetches a URL from the internet and optionally extracts its contents as markdown.\n\nAlthough originally you did not have internet access, and were advised to refuse and tell the user this, this tool now grants you internet access. Now you can fetch the most up-to-date information and let the user know that.","inputSchema":{"description":"Parameters for fetching a URL.","properties":{"url":{"description":"URL to fetch","format":"uri","minLength":1,"title":"Url","type":"string"},"max_length":{"default":5000,"description":"Maximum number of characters to return.","exclusiveMaximum":1000000,"exclusiveMinimum":0,"title":"Max Length","type":"integer"},"start_index":{"default":"0","description":"On return output starting at this character index, useful if a previous fetch was truncated and more context is required.","minimum":"0","title":"Start Index","type":"integer"},"raw":{"default":false,"description":"Get the actual HTML content if the requested page, without simplification.","title":"Raw","type":"boolean"}},"required":["url"],"title":"Fetch","type":"object"}}]}}}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:08.444674","namespace":"mcp_agent.mcp.mcp_aggregator.finder","message":"MCP Aggregator initialized","data":{"data":{"progress_action":"Running","server_name":"fetch","agent_name":"finder"}}}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:08.444702","namespace":"mcp_agent.mcp.mcp_aggregator.finder","message":"MCP Aggregator initialized","data":{"data":{"progress_action":"Running","server_name":"filesystem","agent_name":"finder"}}}
{"level":"INFO","timestamp":"2025-02-17T15:30:08.444869","namespace":"mcp_agent.workflows.llm.augmented_llm_openai.finder","message":"Using reasoning model 'o3-mini' with 'low' reasoning effort"}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:08.481364","namespace":"mcp_agent.agents.agent.finder","message":"Human input callback not set"}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:08.486955","namespace":"mcp_agent.workflows.llm.augmented_llm_openai.finder","message":"{'model': 'o3-mini', 'messages': [{'role': 'system', 'content': \"You are an agent with access to the filesystem, \\n            as well as the ability to fetch URLs. Your job is to identify \\n            the closest match to a user's request, make the appropriate tool calls, \\n            and return the URI and CONTENTS of the closest match.\"}, {'role': 'user', 'content': 'Print the first 2 paragraphs of https://www.anthropic.com/research/building-effective-agents'}], 'stop': None, 'tools': [{'type': 'function', 'function': {'name': 'fetch-fetch', 'description': 'Fetches a URL from the internet and optionally extracts its contents as markdown.\\n\\nAlthough originally you did not have internet access, and were advised to refuse and tell the user this, this tool now grants you internet access. Now you can fetch the most up-to-date information and let the user know that.', 'parameters': {'description': 'Parameters for fetching a URL.', 'properties': {'url': {'description': 'URL to fetch', 'format': 'uri', 'minLength': 1, 'title': 'Url', 'type': 'string'}, 'max_length': {'default': 5000, 'description': 'Maximum number of characters to return.', 'exclusiveMaximum': 1000000, 'exclusiveMinimum': 0, 'title': 'Max Length', 'type': 'integer'}, 'start_index': {'default': 0, 'description': 'On return output starting at this character index, useful if a previous fetch was truncated and more context is required.', 'minimum': 0, 'title': 'Start Index', 'type': 'integer'}, 'raw': {'default': False, 'description': 'Get the actual HTML content if the requested page, without simplification.', 'title': 'Raw', 'type': 'boolean'}}, 'required': ['url'], 'title': 'Fetch', 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'filesystem-read_file', 'description': 'Read the complete contents of a file from the file system. Handles various text encodings and provides detailed error messages if the file cannot be read. Use this tool when you need to examine the contents of a single file. Only works within allowed directories.', 'parameters': {'type': 'object', 'properties': {'path': {'type': 'string'}}, 'required': ['path'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}}}, {'type': 'function', 'function': {'name': 'filesystem-read_multiple_files', 'description': \"Read the contents of multiple files simultaneously. This is more efficient than reading files one by one when you need to analyze or compare multiple files. Each file's content is returned with its path as a reference. Failed reads for individual files won't stop the entire operation. Only works within allowed directories.\", 'parameters': {'type': 'object', 'properties': {'paths': {'type': 'array', 'items': {'type': 'string'}}}, 'required': ['paths'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}}}, {'type': 'function', 'function': {'name': 'filesystem-write_file', 'description': 'Create a new file or completely overwrite an existing file with new content. Use with caution as it will overwrite existing files without warning. Handles text content with proper encoding. Only works within allowed directories.', 'parameters': {'type': 'object', 'properties': {'path': {'type': 'string'}, 'content': {'type': 'string'}}, 'required': ['path', 'content'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}}}, {'type': 'function', 'function': {'name': 'filesystem-edit_file', 'description': 'Make line-based edits to a text file. Each edit replaces exact line sequences with new content. Returns a git-style diff showing the changes made. Only works within allowed directories.', 'parameters': {'type': 'object', 'properties': {'path': {'type': 'string'}, 'edits': {'type': 'array', 'items': {'type': 'object', 'properties': {'oldText': {'type': 'string', 'description': 'Text to search for - must match exactly'}, 'newText': {'type': 'string', 'description': 'Text to replace with'}}, 'required': ['oldText', 'newText'], 'additionalProperties': False}}, 'dryRun': {'type': 'boolean', 'default': False, 'description': 'Preview changes using git-style diff format'}}, 'required': ['path', 'edits'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}}}, {'type': 'function', 'function': {'name': 'filesystem-create_directory', 'description': 'Create a new directory or ensure a directory exists. Can create multiple nested directories in one operation. If the directory already exists, this operation will succeed silently. Perfect for setting up directory structures for projects or ensuring required paths exist. Only works within allowed directories.', 'parameters': {'type': 'object', 'properties': {'path': {'type': 'string'}}, 'required': ['path'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}}}, {'type': 'function', 'function': {'name': 'filesystem-list_directory', 'description': 'Get a detailed listing of all files and directories in a specified path. Results clearly distinguish between files and directories with [FILE] and [DIR] prefixes. This tool is essential for understanding directory structure and finding specific files within a directory. Only works within allowed directories.', 'parameters': {'type': 'object', 'properties': {'path': {'type': 'string'}}, 'required': ['path'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}}}, {'type': 'function', 'function': {'name': 'filesystem-directory_tree', 'description': \"Get a recursive tree view of files and directories as a JSON structure. Each entry includes 'name', 'type' (file/directory), and 'children' for directories. Files have no children array, while directories always have a children array (which may be empty). The output is formatted with 2-space indentation for readability. Only works within allowed directories.\", 'parameters': {'type': 'object', 'properties': {'path': {'type': 'string'}}, 'required': ['path'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}}}, {'type': 'function', 'function': {'name': 'filesystem-move_file', 'description': 'Move or rename files and directories. Can move files between directories and rename them in a single operation. If the destination exists, the operation will fail. Works across different directories and can be used for simple renaming within the same directory. Both source and destination must be within allowed directories.', 'parameters': {'type': 'object', 'properties': {'source': {'type': 'string'}, 'destination': {'type': 'string'}}, 'required': ['source', 'destination'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}}}, {'type': 'function', 'function': {'name': 'filesystem-search_files', 'description': \"Recursively search for files and directories matching a pattern. Searches through all subdirectories from the starting path. The search is case-insensitive and matches partial names. Returns full paths to all matching items. Great for finding files when you don't know their exact location. Only searches within allowed directories.\", 'parameters': {'type': 'object', 'properties': {'path': {'type': 'string'}, 'pattern': {'type': 'string'}, 'excludePatterns': {'type': 'array', 'items': {'type': 'string'}, 'default': []}}, 'required': ['path', 'pattern'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}}}, {'type': 'function', 'function': {'name': 'filesystem-get_file_info', 'description': 'Retrieve detailed metadata about a file or directory. Returns comprehensive information including size, creation time, last modified time, permissions, and type. This tool is perfect for understanding file characteristics without reading the actual content. Only works within allowed directories.', 'parameters': {'type': 'object', 'properties': {'path': {'type': 'string'}}, 'required': ['path'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}}}, {'type': 'function', 'function': {'name': 'filesystem-list_allowed_directories', 'description': 'Returns the list of directories that this server is allowed to access. Use this to understand which directories are available before trying to access files.', 'parameters': {'type': 'object', 'properties': {}, 'required': []}}}], 'max_completion_tokens': 4096, 'reasoning_effort': 'low'}"}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:08.486995","namespace":"mcp_agent.workflows.llm.augmented_llm_openai.finder","message":"Chat in progress","data":{"data":{"progress_action":"Chatting","model":"o3-mini","agent_name":"finder","chat_turn":1}}}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:13.883468","namespace":"mcp_agent.workflows.llm.augmented_llm_openai.finder","message":"OpenAI ChatCompletion response:","data":{"data":{"id":"chatcmpl-B1xMQJvhDJoKS9MFYgkKU0WUUZRXx","choices":[{"finish_reason":"tool_calls","index":0,"logprobs":null,"message":{"content":null,"refusal":null,"role":"assistant","audio":null,"function_call":null,"tool_calls":[{"id":"call_3RXBBQLVeB05lyo7mttdj9B8","function":{"arguments":"{\"url\": \"https://www.anthropic.com/research/building-effective-agents\", \"max_length\": 5000}","name":"fetch-fetch"},"type":"function"}]}}],"created":1739806210,"model":"o3-mini-2025-01-31","object":"chat.completion","service_tier":"default","system_fingerprint":"fp_ef58bd3122","usage":{"completion_tokens":235,"prompt_tokens":1100,"total_tokens":1335,"completion_tokens_details":{"accepted_prediction_tokens":0,"audio_tokens":0,"reasoning_tokens":192,"rejected_prediction_tokens":0},"prompt_tokens_details":{"audio_tokens":0,"cached_tokens":1024}}}}}
{"level":"INFO","timestamp":"2025-02-17T15:30:13.891111","namespace":"mcp_agent.mcp.mcp_aggregator.finder","message":"Requesting tool call","data":{"data":{"progress_action":"Calling Tool","tool_name":"fetch","server_name":"fetch","agent_name":"finder"}}}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:13.891550","namespace":"mcp_agent.mcp.mcp_agent_client_session","message":"send_request: request=","data":{"data":{"method":"tools/call","params":{"meta":null,"name":"fetch","arguments":{"url":"https://www.anthropic.com/research/building-effective-agents","max_length":5000}}}}}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:14.718577","namespace":"mcp_agent.mcp.mcp_agent_client_session","message":"send_request: response=","data":{"data":{"meta":null,"content":[{"type":"text","text":"Contents of https://www.anthropic.com/research/building-effective-agents:\n\n\nOver the past year, we've worked with dozens of teams building large language model (LLM) agents across industries. Consistently, the most successful implementations weren't using complex frameworks or specialized libraries. Instead, they were building with simple, composable patterns.\n\nIn this post, we share what we\u2019ve learned from working with our customers and building agents ourselves, and give practical advice for developers on building effective agents.\n\n## What are agents?\n\n\"Agent\" can be defined in several ways. Some customers define agents as fully autonomous systems that operate independently over extended periods, using various tools to accomplish complex tasks. Others use the term to describe more prescriptive implementations that follow predefined workflows. At Anthropic, we categorize all these variations as **agentic systems**, but draw an important architectural distinction between **workflows** and **agents**:\n\n* **Workflows** are systems where LLMs and tools are orchestrated through predefined code paths.\n* **Agents**, on the other hand, are systems where LLMs dynamically direct their own processes and tool usage, maintaining control over how they accomplish tasks.\n\nBelow, we will explore both types of agentic systems in detail. In Appendix 1 (\u201cAgents in Practice\u201d), we describe two domains where customers have found particular value in using these kinds of systems.\n\n## When (and when not) to use agents\n\nWhen building applications with LLMs, we recommend finding the simplest solution possible, and only increasing complexity when needed. This might mean not building agentic systems at all. Agentic systems often trade latency and cost for better task performance, and you should consider when this tradeoff makes sense.\n\nWhen more complexity is warranted, workflows offer predictability and consistency for well-defined tasks, whereas agents are the better option when flexibility and model-driven decision-making are needed at scale. For many applications, however, optimizing single LLM calls with retrieval and in-context examples is usually enough.\n\n## When and how to use frameworks\n\nThere are many frameworks that make agentic systems easier to implement, including:\n\n* [LangGraph](https://langchain-ai.github.io/langgraph/) from LangChain;\n* Amazon Bedrock's [AI Agent framework](https://aws.amazon.com/bedrock/agents/);\n* [Rivet](https://rivet.ironcladapp.com/), a drag and drop GUI LLM workflow builder; and\n* [Vellum](https://www.vellum.ai/), another GUI tool for building and testing complex workflows.\n\nThese frameworks make it easy to get started by simplifying standard low-level tasks like calling LLMs, defining and parsing tools, and chaining calls together. However, they often create extra layers of abstraction that can obscure the underlying prompts \u200b\u200band responses, making them harder to debug. They can also make it tempting to add complexity when a simpler setup would suffice.\n\nWe suggest that developers start by using LLM APIs directly: many patterns can be implemented in a few lines of code. If you do use a framework, ensure you understand the underlying code. Incorrect assumptions about what's under the hood are a common source of customer error.\n\nSee our [cookbook](https://github.com/anthropics/anthropic-cookbook/tree/main/patterns/agents) for some sample implementations.\n\n## Building blocks, workflows, and agents\n\nIn this section, we\u2019ll explore the common patterns for agentic systems we\u2019ve seen in production. We'll start with our foundational building block\u2014the augmented LLM\u2014and progressively increase complexity, from simple compositional workflows to autonomous agents.\n\n### Building block: The augmented LLM\n\nThe basic building block of agentic systems is an LLM enhanced with augmentations such as retrieval, tools, and memory. Our current models can actively use these capabilities\u2014generating their own search queries, selecting appropriate tools, and determining what information to retain.\n\n![](/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2Fd3083d3f40bb2b6f477901cc9a240738d3dd1371-2401x1000.png&w=3840&q=75)\n\nThe augmented LLM\n\nWe recommend focusing on two key aspects of the implementation: tailoring these capabilities to your specific use case and ensuring they provide an easy, well-documented interface for your LLM. While there are many ways to implement these augmentations, one approach is through our recently released [Model Context Protocol](https://www.anthropic.com/news/model-context-protocol), which allows developers to integrate with a growing ecosystem of third-party tools with a simple [client implementation](https://modelcontextprotocol.io/tutorials/building-a-client#building-mcp-clients).\n\nFor the remainder of this post, we'll assume each LLM call has access to these augmented capabilities.\n\n### Workflow: Prompt chaining\n\nPrompt chaining decomposes a task into a sequence of steps, where each LLM call processes the output of the previous \n\n<error>Content truncated. Call the fetch tool with a start_index of 5000 to get more content.</error>"}],"isError":false}}}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:14.718948","namespace":"mcp_agent.workflows.llm.augmented_llm_openai.finder","message":"Iteration 0: Tool call results: [{'role': 'tool', 'tool_call_id': 'call_3RXBBQLVeB05lyo7mttdj9B8', 'content': [{'type': 'text', 'text': 'Contents of https://www.anthropic.com/research/building-effective-agents:\\n\\n\\nOver the past year, we\\'ve worked with dozens of teams building large language model (LLM) agents across industries. Consistently, the most successful implementations weren\\'t using complex frameworks or specialized libraries. Instead, they were building with simple, composable patterns.\\n\\nIn this post, we share what we\u2019ve learned from working with our customers and building agents ourselves, and give practical advice for developers on building effective agents.\\n\\n## What are agents?\\n\\n\"Agent\" can be defined in several ways. Some customers define agents as fully autonomous systems that operate independently over extended periods, using various tools to accomplish complex tasks. Others use the term to describe more prescriptive implementations that follow predefined workflows. At Anthropic, we categorize all these variations as **agentic systems**, but draw an important architectural distinction between **workflows** and **agents**:\\n\\n* **Workflows** are systems where LLMs and tools are orchestrated through predefined code paths.\\n* **Agents**, on the other hand, are systems where LLMs dynamically direct their own processes and tool usage, maintaining control over how they accomplish tasks.\\n\\nBelow, we will explore both types of agentic systems in detail. In Appendix 1 (\u201cAgents in Practice\u201d), we describe two domains where customers have found particular value in using these kinds of systems.\\n\\n## When (and when not) to use agents\\n\\nWhen building applications with LLMs, we recommend finding the simplest solution possible, and only increasing complexity when needed. This might mean not building agentic systems at all. Agentic systems often trade latency and cost for better task performance, and you should consider when this tradeoff makes sense.\\n\\nWhen more complexity is warranted, workflows offer predictability and consistency for well-defined tasks, whereas agents are the better option when flexibility and model-driven decision-making are needed at scale. For many applications, however, optimizing single LLM calls with retrieval and in-context examples is usually enough.\\n\\n## When and how to use frameworks\\n\\nThere are many frameworks that make agentic systems easier to implement, including:\\n\\n* [LangGraph](https://langchain-ai.github.io/langgraph/) from LangChain;\\n* Amazon Bedrock\\'s [AI Agent framework](https://aws.amazon.com/bedrock/agents/);\\n* [Rivet](https://rivet.ironcladapp.com/), a drag and drop GUI LLM workflow builder; and\\n* [Vellum](https://www.vellum.ai/), another GUI tool for building and testing complex workflows.\\n\\nThese frameworks make it easy to get started by simplifying standard low-level tasks like calling LLMs, defining and parsing tools, and chaining calls together. However, they often create extra layers of abstraction that can obscure the underlying prompts \\u200b\\u200band responses, making them harder to debug. They can also make it tempting to add complexity when a simpler setup would suffice.\\n\\nWe suggest that developers start by using LLM APIs directly: many patterns can be implemented in a few lines of code. If you do use a framework, ensure you understand the underlying code. Incorrect assumptions about what\\'s under the hood are a common source of customer error.\\n\\nSee our [cookbook](https://github.com/anthropics/anthropic-cookbook/tree/main/patterns/agents) for some sample implementations.\\n\\n## Building blocks, workflows, and agents\\n\\nIn this section, we\u2019ll explore the common patterns for agentic systems we\u2019ve seen in production. We\\'ll start with our foundational building block\u2014the augmented LLM\u2014and progressively increase complexity, from simple compositional workflows to autonomous agents.\\n\\n### Building block: The augmented LLM\\n\\nThe basic building block of agentic systems is an LLM enhanced with augmentations such as retrieval, tools, and memory. Our current models can actively use these capabilities\u2014generating their own search queries, selecting appropriate tools, and determining what information to retain.\\n\\n![](/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2Fd3083d3f40bb2b6f477901cc9a240738d3dd1371-2401x1000.png&w=3840&q=75)\\n\\nThe augmented LLM\\n\\nWe recommend focusing on two key aspects of the implementation: tailoring these capabilities to your specific use case and ensuring they provide an easy, well-documented interface for your LLM. While there are many ways to implement these augmentations, one approach is through our recently released [Model Context Protocol](https://www.anthropic.com/news/model-context-protocol), which allows developers to integrate with a growing ecosystem of third-party tools with a simple [client implementation](https://modelcontextprotocol.io/tutorials/building-a-client#building-mcp-clients).\\n\\nFor the remainder of this post, we\\'ll assume each LLM call has access to these augmented capabilities.\\n\\n### Workflow: Prompt chaining\\n\\nPrompt chaining decomposes a task into a sequence of steps, where each LLM call processes the output of the previous \\n\\n<error>Content truncated. Call the fetch tool with a start_index of 5000 to get more content.</error>'}]}]"}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:14.722652","namespace":"mcp_agent.workflows.llm.augmented_llm_openai.finder","message":"{'model': 'o3-mini', 'messages': [{'role': 'system', 'content': \"You are an agent with access to the filesystem, \\n            as well as the ability to fetch URLs. Your job is to identify \\n            the closest match to a user's request, make the appropriate tool calls, \\n            and return the URI and CONTENTS of the closest match.\"}, {'role': 'user', 'content': 'Print the first 2 paragraphs of https://www.anthropic.com/research/building-effective-agents'}, {'role': 'assistant', 'content': None, 'tool_calls': [ChatCompletionMessageToolCall(id='call_3RXBBQLVeB05lyo7mttdj9B8', function=Function(arguments='{\"url\": \"https://www.anthropic.com/research/building-effective-agents\", \"max_length\": 5000}', name='fetch-fetch'), type='function')], 'audio': None, 'refusal': None, 'name': 'finder'}, {'role': 'tool', 'tool_call_id': 'call_3RXBBQLVeB05lyo7mttdj9B8', 'content': [{'type': 'text', 'text': 'Contents of https://www.anthropic.com/research/building-effective-agents:\\n\\n\\nOver the past year, we\\'ve worked with dozens of teams building large language model (LLM) agents across industries. Consistently, the most successful implementations weren\\'t using complex frameworks or specialized libraries. Instead, they were building with simple, composable patterns.\\n\\nIn this post, we share what we\u2019ve learned from working with our customers and building agents ourselves, and give practical advice for developers on building effective agents.\\n\\n## What are agents?\\n\\n\"Agent\" can be defined in several ways. Some customers define agents as fully autonomous systems that operate independently over extended periods, using various tools to accomplish complex tasks. Others use the term to describe more prescriptive implementations that follow predefined workflows. At Anthropic, we categorize all these variations as **agentic systems**, but draw an important architectural distinction between **workflows** and **agents**:\\n\\n* **Workflows** are systems where LLMs and tools are orchestrated through predefined code paths.\\n* **Agents**, on the other hand, are systems where LLMs dynamically direct their own processes and tool usage, maintaining control over how they accomplish tasks.\\n\\nBelow, we will explore both types of agentic systems in detail. In Appendix 1 (\u201cAgents in Practice\u201d), we describe two domains where customers have found particular value in using these kinds of systems.\\n\\n## When (and when not) to use agents\\n\\nWhen building applications with LLMs, we recommend finding the simplest solution possible, and only increasing complexity when needed. This might mean not building agentic systems at all. Agentic systems often trade latency and cost for better task performance, and you should consider when this tradeoff makes sense.\\n\\nWhen more complexity is warranted, workflows offer predictability and consistency for well-defined tasks, whereas agents are the better option when flexibility and model-driven decision-making are needed at scale. For many applications, however, optimizing single LLM calls with retrieval and in-context examples is usually enough.\\n\\n## When and how to use frameworks\\n\\nThere are many frameworks that make agentic systems easier to implement, including:\\n\\n* [LangGraph](https://langchain-ai.github.io/langgraph/) from LangChain;\\n* Amazon Bedrock\\'s [AI Agent framework](https://aws.amazon.com/bedrock/agents/);\\n* [Rivet](https://rivet.ironcladapp.com/), a drag and drop GUI LLM workflow builder; and\\n* [Vellum](https://www.vellum.ai/), another GUI tool for building and testing complex workflows.\\n\\nThese frameworks make it easy to get started by simplifying standard low-level tasks like calling LLMs, defining and parsing tools, and chaining calls together. However, they often create extra layers of abstraction that can obscure the underlying prompts \\u200b\\u200band responses, making them harder to debug. They can also make it tempting to add complexity when a simpler setup would suffice.\\n\\nWe suggest that developers start by using LLM APIs directly: many patterns can be implemented in a few lines of code. If you do use a framework, ensure you understand the underlying code. Incorrect assumptions about what\\'s under the hood are a common source of customer error.\\n\\nSee our [cookbook](https://github.com/anthropics/anthropic-cookbook/tree/main/patterns/agents) for some sample implementations.\\n\\n## Building blocks, workflows, and agents\\n\\nIn this section, we\u2019ll explore the common patterns for agentic systems we\u2019ve seen in production. We\\'ll start with our foundational building block\u2014the augmented LLM\u2014and progressively increase complexity, from simple compositional workflows to autonomous agents.\\n\\n### Building block: The augmented LLM\\n\\nThe basic building block of agentic systems is an LLM enhanced with augmentations such as retrieval, tools, and memory. Our current models can actively use these capabilities\u2014generating their own search queries, selecting appropriate tools, and determining what information to retain.\\n\\n![](/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2Fd3083d3f40bb2b6f477901cc9a240738d3dd1371-2401x1000.png&w=3840&q=75)\\n\\nThe augmented LLM\\n\\nWe recommend focusing on two key aspects of the implementation: tailoring these capabilities to your specific use case and ensuring they provide an easy, well-documented interface for your LLM. While there are many ways to implement these augmentations, one approach is through our recently released [Model Context Protocol](https://www.anthropic.com/news/model-context-protocol), which allows developers to integrate with a growing ecosystem of third-party tools with a simple [client implementation](https://modelcontextprotocol.io/tutorials/building-a-client#building-mcp-clients).\\n\\nFor the remainder of this post, we\\'ll assume each LLM call has access to these augmented capabilities.\\n\\n### Workflow: Prompt chaining\\n\\nPrompt chaining decomposes a task into a sequence of steps, where each LLM call processes the output of the previous \\n\\n<error>Content truncated. Call the fetch tool with a start_index of 5000 to get more content.</error>'}]}], 'stop': None, 'tools': [{'type': 'function', 'function': {'name': 'fetch-fetch', 'description': 'Fetches a URL from the internet and optionally extracts its contents as markdown.\\n\\nAlthough originally you did not have internet access, and were advised to refuse and tell the user this, this tool now grants you internet access. Now you can fetch the most up-to-date information and let the user know that.', 'parameters': {'description': 'Parameters for fetching a URL.', 'properties': {'url': {'description': 'URL to fetch', 'format': 'uri', 'minLength': 1, 'title': 'Url', 'type': 'string'}, 'max_length': {'default': 5000, 'description': 'Maximum number of characters to return.', 'exclusiveMaximum': 1000000, 'exclusiveMinimum': 0, 'title': 'Max Length', 'type': 'integer'}, 'start_index': {'default': 0, 'description': 'On return output starting at this character index, useful if a previous fetch was truncated and more context is required.', 'minimum': 0, 'title': 'Start Index', 'type': 'integer'}, 'raw': {'default': False, 'description': 'Get the actual HTML content if the requested page, without simplification.', 'title': 'Raw', 'type': 'boolean'}}, 'required': ['url'], 'title': 'Fetch', 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'filesystem-read_file', 'description': 'Read the complete contents of a file from the file system. Handles various text encodings and provides detailed error messages if the file cannot be read. Use this tool when you need to examine the contents of a single file. Only works within allowed directories.', 'parameters': {'type': 'object', 'properties': {'path': {'type': 'string'}}, 'required': ['path'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}}}, {'type': 'function', 'function': {'name': 'filesystem-read_multiple_files', 'description': \"Read the contents of multiple files simultaneously. This is more efficient than reading files one by one when you need to analyze or compare multiple files. Each file's content is returned with its path as a reference. Failed reads for individual files won't stop the entire operation. Only works within allowed directories.\", 'parameters': {'type': 'object', 'properties': {'paths': {'type': 'array', 'items': {'type': 'string'}}}, 'required': ['paths'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}}}, {'type': 'function', 'function': {'name': 'filesystem-write_file', 'description': 'Create a new file or completely overwrite an existing file with new content. Use with caution as it will overwrite existing files without warning. Handles text content with proper encoding. Only works within allowed directories.', 'parameters': {'type': 'object', 'properties': {'path': {'type': 'string'}, 'content': {'type': 'string'}}, 'required': ['path', 'content'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}}}, {'type': 'function', 'function': {'name': 'filesystem-edit_file', 'description': 'Make line-based edits to a text file. Each edit replaces exact line sequences with new content. Returns a git-style diff showing the changes made. Only works within allowed directories.', 'parameters': {'type': 'object', 'properties': {'path': {'type': 'string'}, 'edits': {'type': 'array', 'items': {'type': 'object', 'properties': {'oldText': {'type': 'string', 'description': 'Text to search for - must match exactly'}, 'newText': {'type': 'string', 'description': 'Text to replace with'}}, 'required': ['oldText', 'newText'], 'additionalProperties': False}}, 'dryRun': {'type': 'boolean', 'default': False, 'description': 'Preview changes using git-style diff format'}}, 'required': ['path', 'edits'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}}}, {'type': 'function', 'function': {'name': 'filesystem-create_directory', 'description': 'Create a new directory or ensure a directory exists. Can create multiple nested directories in one operation. If the directory already exists, this operation will succeed silently. Perfect for setting up directory structures for projects or ensuring required paths exist. Only works within allowed directories.', 'parameters': {'type': 'object', 'properties': {'path': {'type': 'string'}}, 'required': ['path'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}}}, {'type': 'function', 'function': {'name': 'filesystem-list_directory', 'description': 'Get a detailed listing of all files and directories in a specified path. Results clearly distinguish between files and directories with [FILE] and [DIR] prefixes. This tool is essential for understanding directory structure and finding specific files within a directory. Only works within allowed directories.', 'parameters': {'type': 'object', 'properties': {'path': {'type': 'string'}}, 'required': ['path'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}}}, {'type': 'function', 'function': {'name': 'filesystem-directory_tree', 'description': \"Get a recursive tree view of files and directories as a JSON structure. Each entry includes 'name', 'type' (file/directory), and 'children' for directories. Files have no children array, while directories always have a children array (which may be empty). The output is formatted with 2-space indentation for readability. Only works within allowed directories.\", 'parameters': {'type': 'object', 'properties': {'path': {'type': 'string'}}, 'required': ['path'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}}}, {'type': 'function', 'function': {'name': 'filesystem-move_file', 'description': 'Move or rename files and directories. Can move files between directories and rename them in a single operation. If the destination exists, the operation will fail. Works across different directories and can be used for simple renaming within the same directory. Both source and destination must be within allowed directories.', 'parameters': {'type': 'object', 'properties': {'source': {'type': 'string'}, 'destination': {'type': 'string'}}, 'required': ['source', 'destination'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}}}, {'type': 'function', 'function': {'name': 'filesystem-search_files', 'description': \"Recursively search for files and directories matching a pattern. Searches through all subdirectories from the starting path. The search is case-insensitive and matches partial names. Returns full paths to all matching items. Great for finding files when you don't know their exact location. Only searches within allowed directories.\", 'parameters': {'type': 'object', 'properties': {'path': {'type': 'string'}, 'pattern': {'type': 'string'}, 'excludePatterns': {'type': 'array', 'items': {'type': 'string'}, 'default': []}}, 'required': ['path', 'pattern'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}}}, {'type': 'function', 'function': {'name': 'filesystem-get_file_info', 'description': 'Retrieve detailed metadata about a file or directory. Returns comprehensive information including size, creation time, last modified time, permissions, and type. This tool is perfect for understanding file characteristics without reading the actual content. Only works within allowed directories.', 'parameters': {'type': 'object', 'properties': {'path': {'type': 'string'}}, 'required': ['path'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}}}, {'type': 'function', 'function': {'name': 'filesystem-list_allowed_directories', 'description': 'Returns the list of directories that this server is allowed to access. Use this to understand which directories are available before trying to access files.', 'parameters': {'type': 'object', 'properties': {}, 'required': []}}}], 'max_completion_tokens': 4096, 'reasoning_effort': 'low'}"}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:14.722681","namespace":"mcp_agent.workflows.llm.augmented_llm_openai.finder","message":"Chat in progress","data":{"data":{"progress_action":"Chatting","model":"o3-mini","agent_name":"finder","chat_turn":1}}}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:17.316320","namespace":"mcp_agent.workflows.llm.augmented_llm_openai.finder","message":"OpenAI ChatCompletion response:","data":{"data":{"id":"chatcmpl-B1xMWYiGVlLuE3C4ZsvkdjGaNuxuG","choices":[{"finish_reason":"stop","index":0,"logprobs":null,"message":{"content":"Here are the first two paragraphs:\n\nOver the past year, we've worked with dozens of teams building large language model (LLM) agents across industries. Consistently, the most successful implementations weren't using complex frameworks or specialized libraries. Instead, they were building with simple, composable patterns.\n\nIn this post, we share what we\u2019ve learned from working with our customers and building agents ourselves, and give practical advice for developers on building effective agents.","refusal":null,"role":"assistant","audio":null,"function_call":null,"tool_calls":null}}],"created":1739806216,"model":"o3-mini-2025-01-31","object":"chat.completion","service_tier":"default","system_fingerprint":"fp_ef58bd3122","usage":{"completion_tokens":228,"prompt_tokens":2206,"total_tokens":2434,"completion_tokens_details":{"accepted_prediction_tokens":0,"audio_tokens":0,"reasoning_tokens":128,"rejected_prediction_tokens":0},"prompt_tokens_details":{"audio_tokens":0,"cached_tokens":1024}}}}}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:17.316359","namespace":"mcp_agent.workflows.llm.augmented_llm_openai.finder","message":"Iteration 1: Stopping because finish_reason is 'stop'"}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:17.318710","namespace":"mcp_agent.workflows.llm.augmented_llm_openai.finder","message":"Chat finished","data":{"data":{"progress_action":"Finished","model":"o3-mini","agent_name":"finder"}}}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:17.335904","namespace":"mcp_agent.agents.agent.finder","message":"Human input callback not set"}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:17.338425","namespace":"mcp_agent.workflows.llm.augmented_llm_openai.finder","message":"{'model': 'o3-mini', 'messages': [{'role': 'system', 'content': \"You are an agent with access to the filesystem, \\n            as well as the ability to fetch URLs. Your job is to identify \\n            the closest match to a user's request, make the appropriate tool calls, \\n            and return the URI and CONTENTS of the closest match.\"}, {'role': 'system', 'content': \"You are an agent with access to the filesystem, \\n            as well as the ability to fetch URLs. Your job is to identify \\n            the closest match to a user's request, make the appropriate tool calls, \\n            and return the URI and CONTENTS of the closest match.\"}, {'role': 'user', 'content': 'Print the first 2 paragraphs of https://www.anthropic.com/research/building-effective-agents'}, {'role': 'assistant', 'content': None, 'tool_calls': [ChatCompletionMessageToolCall(id='call_3RXBBQLVeB05lyo7mttdj9B8', function=Function(arguments='{\"url\": \"https://www.anthropic.com/research/building-effective-agents\", \"max_length\": 5000}', name='fetch-fetch'), type='function')], 'audio': None, 'refusal': None, 'name': 'finder'}, {'role': 'tool', 'tool_call_id': 'call_3RXBBQLVeB05lyo7mttdj9B8', 'content': [{'type': 'text', 'text': 'Contents of https://www.anthropic.com/research/building-effective-agents:\\n\\n\\nOver the past year, we\\'ve worked with dozens of teams building large language model (LLM) agents across industries. Consistently, the most successful implementations weren\\'t using complex frameworks or specialized libraries. Instead, they were building with simple, composable patterns.\\n\\nIn this post, we share what we\u2019ve learned from working with our customers and building agents ourselves, and give practical advice for developers on building effective agents.\\n\\n## What are agents?\\n\\n\"Agent\" can be defined in several ways. Some customers define agents as fully autonomous systems that operate independently over extended periods, using various tools to accomplish complex tasks. Others use the term to describe more prescriptive implementations that follow predefined workflows. At Anthropic, we categorize all these variations as **agentic systems**, but draw an important architectural distinction between **workflows** and **agents**:\\n\\n* **Workflows** are systems where LLMs and tools are orchestrated through predefined code paths.\\n* **Agents**, on the other hand, are systems where LLMs dynamically direct their own processes and tool usage, maintaining control over how they accomplish tasks.\\n\\nBelow, we will explore both types of agentic systems in detail. In Appendix 1 (\u201cAgents in Practice\u201d), we describe two domains where customers have found particular value in using these kinds of systems.\\n\\n## When (and when not) to use agents\\n\\nWhen building applications with LLMs, we recommend finding the simplest solution possible, and only increasing complexity when needed. This might mean not building agentic systems at all. Agentic systems often trade latency and cost for better task performance, and you should consider when this tradeoff makes sense.\\n\\nWhen more complexity is warranted, workflows offer predictability and consistency for well-defined tasks, whereas agents are the better option when flexibility and model-driven decision-making are needed at scale. For many applications, however, optimizing single LLM calls with retrieval and in-context examples is usually enough.\\n\\n## When and how to use frameworks\\n\\nThere are many frameworks that make agentic systems easier to implement, including:\\n\\n* [LangGraph](https://langchain-ai.github.io/langgraph/) from LangChain;\\n* Amazon Bedrock\\'s [AI Agent framework](https://aws.amazon.com/bedrock/agents/);\\n* [Rivet](https://rivet.ironcladapp.com/), a drag and drop GUI LLM workflow builder; and\\n* [Vellum](https://www.vellum.ai/), another GUI tool for building and testing complex workflows.\\n\\nThese frameworks make it easy to get started by simplifying standard low-level tasks like calling LLMs, defining and parsing tools, and chaining calls together. However, they often create extra layers of abstraction that can obscure the underlying prompts \\u200b\\u200band responses, making them harder to debug. They can also make it tempting to add complexity when a simpler setup would suffice.\\n\\nWe suggest that developers start by using LLM APIs directly: many patterns can be implemented in a few lines of code. If you do use a framework, ensure you understand the underlying code. Incorrect assumptions about what\\'s under the hood are a common source of customer error.\\n\\nSee our [cookbook](https://github.com/anthropics/anthropic-cookbook/tree/main/patterns/agents) for some sample implementations.\\n\\n## Building blocks, workflows, and agents\\n\\nIn this section, we\u2019ll explore the common patterns for agentic systems we\u2019ve seen in production. We\\'ll start with our foundational building block\u2014the augmented LLM\u2014and progressively increase complexity, from simple compositional workflows to autonomous agents.\\n\\n### Building block: The augmented LLM\\n\\nThe basic building block of agentic systems is an LLM enhanced with augmentations such as retrieval, tools, and memory. Our current models can actively use these capabilities\u2014generating their own search queries, selecting appropriate tools, and determining what information to retain.\\n\\n![](/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2Fd3083d3f40bb2b6f477901cc9a240738d3dd1371-2401x1000.png&w=3840&q=75)\\n\\nThe augmented LLM\\n\\nWe recommend focusing on two key aspects of the implementation: tailoring these capabilities to your specific use case and ensuring they provide an easy, well-documented interface for your LLM. While there are many ways to implement these augmentations, one approach is through our recently released [Model Context Protocol](https://www.anthropic.com/news/model-context-protocol), which allows developers to integrate with a growing ecosystem of third-party tools with a simple [client implementation](https://modelcontextprotocol.io/tutorials/building-a-client#building-mcp-clients).\\n\\nFor the remainder of this post, we\\'ll assume each LLM call has access to these augmented capabilities.\\n\\n### Workflow: Prompt chaining\\n\\nPrompt chaining decomposes a task into a sequence of steps, where each LLM call processes the output of the previous \\n\\n<error>Content truncated. Call the fetch tool with a start_index of 5000 to get more content.</error>'}]}, {'role': 'assistant', 'content': \"Here are the first two paragraphs:\\n\\nOver the past year, we've worked with dozens of teams building large language model (LLM) agents across industries. Consistently, the most successful implementations weren't using complex frameworks or specialized libraries. Instead, they were building with simple, composable patterns.\\n\\nIn this post, we share what we\u2019ve learned from working with our customers and building agents ourselves, and give practical advice for developers on building effective agents.\", 'tool_calls': None, 'audio': None, 'refusal': None, 'name': 'finder'}, {'role': 'user', 'content': 'Summarize those paragraphs in a 128 character tweet'}], 'stop': None, 'tools': [{'type': 'function', 'function': {'name': 'fetch-fetch', 'description': 'Fetches a URL from the internet and optionally extracts its contents as markdown.\\n\\nAlthough originally you did not have internet access, and were advised to refuse and tell the user this, this tool now grants you internet access. Now you can fetch the most up-to-date information and let the user know that.', 'parameters': {'description': 'Parameters for fetching a URL.', 'properties': {'url': {'description': 'URL to fetch', 'format': 'uri', 'minLength': 1, 'title': 'Url', 'type': 'string'}, 'max_length': {'default': 5000, 'description': 'Maximum number of characters to return.', 'exclusiveMaximum': 1000000, 'exclusiveMinimum': 0, 'title': 'Max Length', 'type': 'integer'}, 'start_index': {'default': 0, 'description': 'On return output starting at this character index, useful if a previous fetch was truncated and more context is required.', 'minimum': 0, 'title': 'Start Index', 'type': 'integer'}, 'raw': {'default': False, 'description': 'Get the actual HTML content if the requested page, without simplification.', 'title': 'Raw', 'type': 'boolean'}}, 'required': ['url'], 'title': 'Fetch', 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'filesystem-read_file', 'description': 'Read the complete contents of a file from the file system. Handles various text encodings and provides detailed error messages if the file cannot be read. Use this tool when you need to examine the contents of a single file. Only works within allowed directories.', 'parameters': {'type': 'object', 'properties': {'path': {'type': 'string'}}, 'required': ['path'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}}}, {'type': 'function', 'function': {'name': 'filesystem-read_multiple_files', 'description': \"Read the contents of multiple files simultaneously. This is more efficient than reading files one by one when you need to analyze or compare multiple files. Each file's content is returned with its path as a reference. Failed reads for individual files won't stop the entire operation. Only works within allowed directories.\", 'parameters': {'type': 'object', 'properties': {'paths': {'type': 'array', 'items': {'type': 'string'}}}, 'required': ['paths'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}}}, {'type': 'function', 'function': {'name': 'filesystem-write_file', 'description': 'Create a new file or completely overwrite an existing file with new content. Use with caution as it will overwrite existing files without warning. Handles text content with proper encoding. Only works within allowed directories.', 'parameters': {'type': 'object', 'properties': {'path': {'type': 'string'}, 'content': {'type': 'string'}}, 'required': ['path', 'content'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}}}, {'type': 'function', 'function': {'name': 'filesystem-edit_file', 'description': 'Make line-based edits to a text file. Each edit replaces exact line sequences with new content. Returns a git-style diff showing the changes made. Only works within allowed directories.', 'parameters': {'type': 'object', 'properties': {'path': {'type': 'string'}, 'edits': {'type': 'array', 'items': {'type': 'object', 'properties': {'oldText': {'type': 'string', 'description': 'Text to search for - must match exactly'}, 'newText': {'type': 'string', 'description': 'Text to replace with'}}, 'required': ['oldText', 'newText'], 'additionalProperties': False}}, 'dryRun': {'type': 'boolean', 'default': False, 'description': 'Preview changes using git-style diff format'}}, 'required': ['path', 'edits'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}}}, {'type': 'function', 'function': {'name': 'filesystem-create_directory', 'description': 'Create a new directory or ensure a directory exists. Can create multiple nested directories in one operation. If the directory already exists, this operation will succeed silently. Perfect for setting up directory structures for projects or ensuring required paths exist. Only works within allowed directories.', 'parameters': {'type': 'object', 'properties': {'path': {'type': 'string'}}, 'required': ['path'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}}}, {'type': 'function', 'function': {'name': 'filesystem-list_directory', 'description': 'Get a detailed listing of all files and directories in a specified path. Results clearly distinguish between files and directories with [FILE] and [DIR] prefixes. This tool is essential for understanding directory structure and finding specific files within a directory. Only works within allowed directories.', 'parameters': {'type': 'object', 'properties': {'path': {'type': 'string'}}, 'required': ['path'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}}}, {'type': 'function', 'function': {'name': 'filesystem-directory_tree', 'description': \"Get a recursive tree view of files and directories as a JSON structure. Each entry includes 'name', 'type' (file/directory), and 'children' for directories. Files have no children array, while directories always have a children array (which may be empty). The output is formatted with 2-space indentation for readability. Only works within allowed directories.\", 'parameters': {'type': 'object', 'properties': {'path': {'type': 'string'}}, 'required': ['path'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}}}, {'type': 'function', 'function': {'name': 'filesystem-move_file', 'description': 'Move or rename files and directories. Can move files between directories and rename them in a single operation. If the destination exists, the operation will fail. Works across different directories and can be used for simple renaming within the same directory. Both source and destination must be within allowed directories.', 'parameters': {'type': 'object', 'properties': {'source': {'type': 'string'}, 'destination': {'type': 'string'}}, 'required': ['source', 'destination'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}}}, {'type': 'function', 'function': {'name': 'filesystem-search_files', 'description': \"Recursively search for files and directories matching a pattern. Searches through all subdirectories from the starting path. The search is case-insensitive and matches partial names. Returns full paths to all matching items. Great for finding files when you don't know their exact location. Only searches within allowed directories.\", 'parameters': {'type': 'object', 'properties': {'path': {'type': 'string'}, 'pattern': {'type': 'string'}, 'excludePatterns': {'type': 'array', 'items': {'type': 'string'}, 'default': []}}, 'required': ['path', 'pattern'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}}}, {'type': 'function', 'function': {'name': 'filesystem-get_file_info', 'description': 'Retrieve detailed metadata about a file or directory. Returns comprehensive information including size, creation time, last modified time, permissions, and type. This tool is perfect for understanding file characteristics without reading the actual content. Only works within allowed directories.', 'parameters': {'type': 'object', 'properties': {'path': {'type': 'string'}}, 'required': ['path'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}}}, {'type': 'function', 'function': {'name': 'filesystem-list_allowed_directories', 'description': 'Returns the list of directories that this server is allowed to access. Use this to understand which directories are available before trying to access files.', 'parameters': {'type': 'object', 'properties': {}, 'required': []}}}], 'max_completion_tokens': 4096, 'reasoning_effort': 'low'}"}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:17.338450","namespace":"mcp_agent.workflows.llm.augmented_llm_openai.finder","message":"Chat in progress","data":{"data":{"progress_action":"Chatting","model":"o3-mini","agent_name":"finder","chat_turn":3}}}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:20.047387","namespace":"mcp_agent.workflows.llm.augmented_llm_openai.finder","message":"OpenAI ChatCompletion response:","data":{"data":{"id":"chatcmpl-B1xMZKGgtkJ9vLjWrCR93BmvTW1KS","choices":[{"finish_reason":"stop","index":0,"logprobs":null,"message":{"content":"LLM agents flourish when kept simple. Developed with hands-on insights, effective builders favor composable patterns over complexity.","refusal":null,"role":"assistant","audio":null,"function_call":null,"tool_calls":null}}],"created":1739806219,"model":"o3-mini-2025-01-31","object":"chat.completion","service_tier":"default","system_fingerprint":"fp_ef58bd3122","usage":{"completion_tokens":98,"prompt_tokens":2376,"total_tokens":2474,"completion_tokens_details":{"accepted_prediction_tokens":0,"audio_tokens":0,"reasoning_tokens":64,"rejected_prediction_tokens":0},"prompt_tokens_details":{"audio_tokens":0,"cached_tokens":0}}}}}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:20.047420","namespace":"mcp_agent.workflows.llm.augmented_llm_openai.finder","message":"Iteration 0: Stopping because finish_reason is 'stop'"}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:20.049856","namespace":"mcp_agent.workflows.llm.augmented_llm_openai.finder","message":"Chat finished","data":{"data":{"progress_action":"Finished","model":"o3-mini","agent_name":"finder"}}}
{"level":"INFO","timestamp":"2025-02-17T15:30:20.049880","namespace":"mcp_agent.mcp.mcp_aggregator.finder","message":"Shutting down all persistent connections..."}
{"level":"INFO","timestamp":"2025-02-17T15:30:20.049890","namespace":"mcp_agent.mcp.mcp_connection_manager","message":"Disconnecting all persistent server connections..."}
{"level":"INFO","timestamp":"2025-02-17T15:30:20.050368","namespace":"mcp_agent.mcp.mcp_connection_manager","message":"All persistent server connections signaled to disconnect."}
{"level":"DEBUG","timestamp":"2025-02-17T15:30:20.050380","namespace":"mcp_agent.mcp.mcp_connection_manager","message":"MCPConnectionManager: shutting down all server tasks..."}
{"level":"INFO","timestamp":"2025-02-17T15:30:20.104766","namespace":"mcp_agent.mcp_basic_agent","message":"MCPAgent cleanup","data":{"data":{"progress_action":"Finished","target":"mcp_basic_agent","agent_name":"mcp_application_loop"}}}
